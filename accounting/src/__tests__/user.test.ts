/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { AccountingSDK } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("User Create User", async () => {
  const accountingSDK = new AccountingSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("createUser"),
    apiKey: "<YOUR_API_KEY_HERE>",
  });

  const result = await accountingSDK.user.createUser({
    id: 10,
    username: "theUser",
    firstName: "John",
    lastName: "James",
    email: "john@email.com",
    password: "12345",
    phone: "12345",
    userStatus: 1,
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 10,
    username: "theUser",
    firstName: "John",
    lastName: "James",
    email: "john@email.com",
    password: "12345",
    phone: "12345",
    userStatus: 1,
  });
});

test("User Create Users With List Input", async () => {
  const accountingSDK = new AccountingSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("createUsersWithListInput"),
    apiKey: "<YOUR_API_KEY_HERE>",
  });

  const result = await accountingSDK.user.createUsersWithListInput([
    {
      id: 10,
      username: "theUser",
      firstName: "John",
      lastName: "James",
      email: "john@email.com",
      password: "12345",
      phone: "12345",
      userStatus: 1,
    },
  ]);
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 10,
    username: "theUser",
    firstName: "John",
    lastName: "James",
    email: "john@email.com",
    password: "12345",
    phone: "12345",
    userStatus: 1,
  });
});

test("User Login User", async () => {
  const accountingSDK = new AccountingSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("loginUser"),
    apiKey: "<YOUR_API_KEY_HERE>",
  });

  const result = await accountingSDK.user.loginUser({});
  expect(result).toBeDefined();
});

test("User Logout User", async () => {
  const accountingSDK = new AccountingSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("logoutUser"),
    apiKey: "<YOUR_API_KEY_HERE>",
  });

  await accountingSDK.user.logoutUser();
});

test("User Get User By Name", async () => {
  const accountingSDK = new AccountingSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("getUserByName"),
    apiKey: "<YOUR_API_KEY_HERE>",
  });

  const result = await accountingSDK.user.getUserByName({
    username: "Zachery_Lubowitz15",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 10,
    username: "theUser",
    firstName: "John",
    lastName: "James",
    email: "john@email.com",
    password: "12345",
    phone: "12345",
    userStatus: 1,
  });
});

test("User Update User", async () => {
  const accountingSDK = new AccountingSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("updateUser"),
    apiKey: "<YOUR_API_KEY_HERE>",
  });

  await accountingSDK.user.updateUser({
    username: "Dandre_Hand41",
    user: {
      id: 10,
      username: "theUser",
      firstName: "John",
      lastName: "James",
      email: "john@email.com",
      password: "12345",
      phone: "12345",
      userStatus: 1,
    },
  });
});

test("User Delete User", async () => {
  const accountingSDK = new AccountingSDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deleteUser"),
    apiKey: "<YOUR_API_KEY_HERE>",
  });

  const result = await accountingSDK.user.deleteUser({
    username: "Demetris_Schmitt",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: 10,
    username: "theUser",
    firstName: "John",
    lastName: "James",
    email: "john@email.com",
    password: "12345",
    phone: "12345",
    userStatus: 1,
  });
});
