/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListPetsRequest = {
    /**
     * How many items to return at one time (max 100)
     */
    limit?: number | undefined;
};

export type ListPetsResponseResult = components.ErrorT | Array<components.Pet>;

export type ListPetsResponse = {
    headers: { [k: string]: Array<string> };
    result: components.ErrorT | Array<components.Pet>;
};

/** @internal */
export namespace ListPetsRequest$ {
    export const inboundSchema: z.ZodType<ListPetsRequest, z.ZodTypeDef, unknown> = z.object({
        limit: z.number().int().optional(),
    });

    export type Outbound = {
        limit?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPetsRequest> = z.object({
        limit: z.number().int().optional(),
    });
}

/** @internal */
export namespace ListPetsResponseResult$ {
    export const inboundSchema: z.ZodType<ListPetsResponseResult, z.ZodTypeDef, unknown> = z.union([
        components.ErrorT$.inboundSchema,
        z.array(components.Pet$.inboundSchema),
    ]);

    export type Outbound = components.ErrorT$.Outbound | Array<components.Pet$.Outbound>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPetsResponseResult> =
        z.union([components.ErrorT$.outboundSchema, z.array(components.Pet$.outboundSchema)]);
}

/** @internal */
export namespace ListPetsResponse$ {
    export const inboundSchema: z.ZodType<ListPetsResponse, z.ZodTypeDef, unknown> = z
        .object({
            Headers: z.record(z.array(z.string())),
            Result: z.union([
                components.ErrorT$.inboundSchema,
                z.array(components.Pet$.inboundSchema),
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                Headers: "headers",
                Result: "result",
            });
        });

    export type Outbound = {
        Headers: { [k: string]: Array<string> };
        Result: components.ErrorT$.Outbound | Array<components.Pet$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPetsResponse> = z
        .object({
            headers: z.record(z.array(z.string())),
            result: z.union([
                components.ErrorT$.outboundSchema,
                z.array(components.Pet$.outboundSchema),
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                headers: "Headers",
                result: "Result",
            });
        });
}
